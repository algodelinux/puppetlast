#!/bin/bash
# ------------------------------------------------------------
# script:  puppetlast
# Author:  Esteban M. Navas Martín
# Date:    11-01-2017
# Ver:     17-01-2017
#
# Purpose: This program shows the last connect time of puppet nodes.
# It currently displays them in green if they've connected in seconds or minutes.
# It currently displays them in red if they've connected in hours or days.
#
# Copyright (c) 2012-2017 Esteban M. Navas Martín <algodelinux@gmail.com>. All rights reserved.
#
# Syntax: puppetlast [-m|--min time] [-M|--max time]
#
# Options:
# -m|--min: let specify min display time
# -M|--max: let specify max display time
#
# time is a combination of number+letter where:
# letter must be: [dhms]
# d: days
# h: hours
# m: minutes
# s: seconds
#
# Examples:
#    puppetlast
#    puppetlast -m 1h
#    puppetlast -M 2d
#    puppetlast -M 1h -m 2d
#    puppetlast -M 19h -m 1m
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.

#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#   You should have received a copy of the GNU General Public License
#   along with this program. If not, see <http://www.gnu.org/licenses/>.

function displaytime {

  GREEN='\033[0;92m'
  RED='\033[0;91m'
  BIRED='\033[1;91m'
  NC='\033[0m'

  local T=$1
  local D=$((T/60/60/24))
  local H=$((T/60/60%24))
  local M=$((T/60%60))
  local S=$((T%60))

  if [ $D -gt 0 ]; then
     printf "${BIRED} %5s days ago: " $D
  elif [ $H -gt 0 ]; then
     printf "${RED} %5s hours ago: " $H
  elif [ $M -gt 0 ]; then
     printf "${GREEN} %5s minutes ago: " $M
  elif [ $S -gt 0 ]; then
     printf "${GREEN} %5s seconds ago: " $S
  fi
  printf '%s ' $3
  printf "(%s)\n" $2
}

function calculatetime {

  local ARGUMENTO=$1
  local NUMERO=${ARGUMENTO%%[dhms]}
  local LETRA=${ARGUMENTO:${#NUMERO}}
  local VALOR=$1

  if [ $LETRA = "d" ]; then
     VALOR=$((NUMERO*60*60*24))
  elif [ $LETRA = "h" ]; then
     VALOR=$((NUMERO*60*60))
  elif [ $LETRA = "m" ]; then
     VALOR=$((NUMERO*60))
  elif [ $LETRA = "s" ]; then
     VALOR=$((NUMERO))
  fi
  echo $VALOR
}

# read the options
TEMP=`getopt -o m:M: --long min:,max: -n "$0" -- "$@"`
eval set -- "$TEMP"

# extract options and their arguments into variables.
while true; do
   case "$1" in
       -m|--min)
            case "$2" in
                "") shift 2 ;;
                *) if [[ "$2" =~ [0-9]+[dhms] ]]; then
                      MIN=$(calculatetime $2)
		   fi
		   shift 2 ;;
            esac ;;
        -M|--max)
            case "$2" in
                "") shift 2 ;;
                *) if [[ "$2" =~ [0-9]+[dhms] ]]; then
		      MAX=$(calculatetime $2)
		   fi
		   shift 2 ;;
            esac ;;
        --) shift ; break ;;
        *) break ;;
    esac
done

if [ $MIN ] && [ $MAX ] && [ $MIN -gt $MAX ]; then
   echo "El valor mínimo debe ser menor que el valor máximo."
   exit 1;
fi

:> /tmp/puppetlast.tmp

for fichero in $(ls /var/lib/puppet/yaml/facts/* 2>/dev/null); do
   # Calculamos la diferencia
   antsyslog=$(stat -c %Y  /var/log/syslog)
   antfichero=$(stat -c %Y $fichero)
   diferencia=$((antsyslog-antfichero))
   hostname=$(sed -n 's|fqdn:\(.*\)|\1|p' $fichero | sed -e 's/^[ \t]*//')
   echo "$diferencia:$hostname:$fichero" >> /tmp/puppetlast.tmp
done

sort -k1n -o /tmp/puppetlast.tmp /tmp/puppetlast.tmp

[ -n "$MIN" ] && gawk -v minimo="$MIN" -i inplace -F":" '$1>=minimo' /tmp/puppetlast.tmp
[ -n "$MAX" ] && gawk -v maximo="$MAX" -i inplace -F":" '$1<=maximo' /tmp/puppetlast.tmp


OLDIFS=$IFS
IFS=:
while read tiempo hostname fichero
do
   basenamefichero=$(basename $fichero)
   uuid=$(echo "${basenamefichero%.*}")
   displaytime $tiempo $hostname $uuid
done < /tmp/puppetlast.tmp
printf '\n'
IFS=$OLDIFS
